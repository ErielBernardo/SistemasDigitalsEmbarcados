   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"core_cm3.c"
  23              	.Ltext0:
  24              		.file 1 "../core_cm3.c"
 627              		.align	2
 628              		.global	__get_PSP
 629              		.thumb
 630              		.thumb_func
 632              	__get_PSP:
 633              	.LFB0:
   1:../core_cm3.c **** /**************************************************************************//**
   2:../core_cm3.c ****  * @file     core_cm3.c
   3:../core_cm3.c ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Source File
   4:../core_cm3.c ****  * @version  V1.30
   5:../core_cm3.c ****  * @date     30. October 2009
   6:../core_cm3.c ****  *
   7:../core_cm3.c ****  * @note
   8:../core_cm3.c ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:../core_cm3.c ****  *
  10:../core_cm3.c ****  * @par
  11:../core_cm3.c ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../core_cm3.c ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../core_cm3.c ****  * within development tools that are supporting such ARM based processors. 
  14:../core_cm3.c ****  *
  15:../core_cm3.c ****  * @par
  16:../core_cm3.c ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../core_cm3.c ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../core_cm3.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../core_cm3.c ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../core_cm3.c ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../core_cm3.c ****  *
  22:../core_cm3.c ****  ******************************************************************************/
  23:../core_cm3.c **** 
  24:../core_cm3.c **** #include <stdint.h>
  25:../core_cm3.c **** 
  26:../core_cm3.c **** /* define compiler specific symbols */
  27:../core_cm3.c **** #if defined ( __CC_ARM   )
  28:../core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  29:../core_cm3.c ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  30:../core_cm3.c **** 
  31:../core_cm3.c **** #elif defined ( __ICCARM__ )
  32:../core_cm3.c ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  33:../core_cm3.c ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  34:../core_cm3.c **** 
  35:../core_cm3.c **** #elif defined   (  __GNUC__  )
  36:../core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  37:../core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  38:../core_cm3.c **** 
  39:../core_cm3.c **** #elif defined   (  __TASKING__  )
  40:../core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  41:../core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  42:../core_cm3.c **** 
  43:../core_cm3.c **** #endif
  44:../core_cm3.c **** 
  45:../core_cm3.c **** 
  46:../core_cm3.c **** /* ###################  Compiler specific Intrinsics  ########################### */
  47:../core_cm3.c **** 
  48:../core_cm3.c **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
  49:../core_cm3.c **** /* ARM armcc specific functions */
  50:../core_cm3.c **** 
  51:../core_cm3.c **** /**
  52:../core_cm3.c ****  * @brief  Return the Process Stack Pointer
  53:../core_cm3.c ****  *
  54:../core_cm3.c ****  * @return ProcessStackPointer
  55:../core_cm3.c ****  *
  56:../core_cm3.c ****  * Return the actual process stack pointer
  57:../core_cm3.c ****  */
  58:../core_cm3.c **** __ASM uint32_t __get_PSP(void)
  59:../core_cm3.c **** {
  60:../core_cm3.c ****   mrs r0, psp
  61:../core_cm3.c ****   bx lr
  62:../core_cm3.c **** }
  63:../core_cm3.c **** 
  64:../core_cm3.c **** /**
  65:../core_cm3.c ****  * @brief  Set the Process Stack Pointer
  66:../core_cm3.c ****  *
  67:../core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
  68:../core_cm3.c ****  *
  69:../core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
  70:../core_cm3.c ****  * (process stack pointer) Cortex processor register
  71:../core_cm3.c ****  */
  72:../core_cm3.c **** __ASM void __set_PSP(uint32_t topOfProcStack)
  73:../core_cm3.c **** {
  74:../core_cm3.c ****   msr psp, r0
  75:../core_cm3.c ****   bx lr
  76:../core_cm3.c **** }
  77:../core_cm3.c **** 
  78:../core_cm3.c **** /**
  79:../core_cm3.c ****  * @brief  Return the Main Stack Pointer
  80:../core_cm3.c ****  *
  81:../core_cm3.c ****  * @return Main Stack Pointer
  82:../core_cm3.c ****  *
  83:../core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
  84:../core_cm3.c ****  * Cortex processor register
  85:../core_cm3.c ****  */
  86:../core_cm3.c **** __ASM uint32_t __get_MSP(void)
  87:../core_cm3.c **** {
  88:../core_cm3.c ****   mrs r0, msp
  89:../core_cm3.c ****   bx lr
  90:../core_cm3.c **** }
  91:../core_cm3.c **** 
  92:../core_cm3.c **** /**
  93:../core_cm3.c ****  * @brief  Set the Main Stack Pointer
  94:../core_cm3.c ****  *
  95:../core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
  96:../core_cm3.c ****  *
  97:../core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
  98:../core_cm3.c ****  * (main stack pointer) Cortex processor register
  99:../core_cm3.c ****  */
 100:../core_cm3.c **** __ASM void __set_MSP(uint32_t mainStackPointer)
 101:../core_cm3.c **** {
 102:../core_cm3.c ****   msr msp, r0
 103:../core_cm3.c ****   bx lr
 104:../core_cm3.c **** }
 105:../core_cm3.c **** 
 106:../core_cm3.c **** /**
 107:../core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 108:../core_cm3.c ****  *
 109:../core_cm3.c ****  * @param   value  value to reverse
 110:../core_cm3.c ****  * @return         reversed value
 111:../core_cm3.c ****  *
 112:../core_cm3.c ****  * Reverse byte order in unsigned short value
 113:../core_cm3.c ****  */
 114:../core_cm3.c **** __ASM uint32_t __REV16(uint16_t value)
 115:../core_cm3.c **** {
 116:../core_cm3.c ****   rev16 r0, r0
 117:../core_cm3.c ****   bx lr
 118:../core_cm3.c **** }
 119:../core_cm3.c **** 
 120:../core_cm3.c **** /**
 121:../core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 122:../core_cm3.c ****  *
 123:../core_cm3.c ****  * @param   value  value to reverse
 124:../core_cm3.c ****  * @return         reversed value
 125:../core_cm3.c ****  *
 126:../core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 127:../core_cm3.c ****  */
 128:../core_cm3.c **** __ASM int32_t __REVSH(int16_t value)
 129:../core_cm3.c **** {
 130:../core_cm3.c ****   revsh r0, r0
 131:../core_cm3.c ****   bx lr
 132:../core_cm3.c **** }
 133:../core_cm3.c **** 
 134:../core_cm3.c **** 
 135:../core_cm3.c **** #if (__ARMCC_VERSION < 400000)
 136:../core_cm3.c **** 
 137:../core_cm3.c **** /**
 138:../core_cm3.c ****  * @brief  Remove the exclusive lock created by ldrex
 139:../core_cm3.c ****  *
 140:../core_cm3.c ****  * Removes the exclusive lock which is created by ldrex.
 141:../core_cm3.c ****  */
 142:../core_cm3.c **** __ASM void __CLREX(void)
 143:../core_cm3.c **** {
 144:../core_cm3.c ****   clrex
 145:../core_cm3.c **** }
 146:../core_cm3.c **** 
 147:../core_cm3.c **** /**
 148:../core_cm3.c ****  * @brief  Return the Base Priority value
 149:../core_cm3.c ****  *
 150:../core_cm3.c ****  * @return BasePriority
 151:../core_cm3.c ****  *
 152:../core_cm3.c ****  * Return the content of the base priority register
 153:../core_cm3.c ****  */
 154:../core_cm3.c **** __ASM uint32_t  __get_BASEPRI(void)
 155:../core_cm3.c **** {
 156:../core_cm3.c ****   mrs r0, basepri
 157:../core_cm3.c ****   bx lr
 158:../core_cm3.c **** }
 159:../core_cm3.c **** 
 160:../core_cm3.c **** /**
 161:../core_cm3.c ****  * @brief  Set the Base Priority value
 162:../core_cm3.c ****  *
 163:../core_cm3.c ****  * @param  basePri  BasePriority
 164:../core_cm3.c ****  *
 165:../core_cm3.c ****  * Set the base priority register
 166:../core_cm3.c ****  */
 167:../core_cm3.c **** __ASM void __set_BASEPRI(uint32_t basePri)
 168:../core_cm3.c **** {
 169:../core_cm3.c ****   msr basepri, r0
 170:../core_cm3.c ****   bx lr
 171:../core_cm3.c **** }
 172:../core_cm3.c **** 
 173:../core_cm3.c **** /**
 174:../core_cm3.c ****  * @brief  Return the Priority Mask value
 175:../core_cm3.c ****  *
 176:../core_cm3.c ****  * @return PriMask
 177:../core_cm3.c ****  *
 178:../core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 179:../core_cm3.c ****  */
 180:../core_cm3.c **** __ASM uint32_t __get_PRIMASK(void)
 181:../core_cm3.c **** {
 182:../core_cm3.c ****   mrs r0, primask
 183:../core_cm3.c ****   bx lr
 184:../core_cm3.c **** }
 185:../core_cm3.c **** 
 186:../core_cm3.c **** /**
 187:../core_cm3.c ****  * @brief  Set the Priority Mask value
 188:../core_cm3.c ****  *
 189:../core_cm3.c ****  * @param  priMask  PriMask
 190:../core_cm3.c ****  *
 191:../core_cm3.c ****  * Set the priority mask bit in the priority mask register
 192:../core_cm3.c ****  */
 193:../core_cm3.c **** __ASM void __set_PRIMASK(uint32_t priMask)
 194:../core_cm3.c **** {
 195:../core_cm3.c ****   msr primask, r0
 196:../core_cm3.c ****   bx lr
 197:../core_cm3.c **** }
 198:../core_cm3.c **** 
 199:../core_cm3.c **** /**
 200:../core_cm3.c ****  * @brief  Return the Fault Mask value
 201:../core_cm3.c ****  *
 202:../core_cm3.c ****  * @return FaultMask
 203:../core_cm3.c ****  *
 204:../core_cm3.c ****  * Return the content of the fault mask register
 205:../core_cm3.c ****  */
 206:../core_cm3.c **** __ASM uint32_t  __get_FAULTMASK(void)
 207:../core_cm3.c **** {
 208:../core_cm3.c ****   mrs r0, faultmask
 209:../core_cm3.c ****   bx lr
 210:../core_cm3.c **** }
 211:../core_cm3.c **** 
 212:../core_cm3.c **** /**
 213:../core_cm3.c ****  * @brief  Set the Fault Mask value
 214:../core_cm3.c ****  *
 215:../core_cm3.c ****  * @param  faultMask  faultMask value
 216:../core_cm3.c ****  *
 217:../core_cm3.c ****  * Set the fault mask register
 218:../core_cm3.c ****  */
 219:../core_cm3.c **** __ASM void __set_FAULTMASK(uint32_t faultMask)
 220:../core_cm3.c **** {
 221:../core_cm3.c ****   msr faultmask, r0
 222:../core_cm3.c ****   bx lr
 223:../core_cm3.c **** }
 224:../core_cm3.c **** 
 225:../core_cm3.c **** /**
 226:../core_cm3.c ****  * @brief  Return the Control Register value
 227:../core_cm3.c ****  * 
 228:../core_cm3.c ****  * @return Control value
 229:../core_cm3.c ****  *
 230:../core_cm3.c ****  * Return the content of the control register
 231:../core_cm3.c ****  */
 232:../core_cm3.c **** __ASM uint32_t __get_CONTROL(void)
 233:../core_cm3.c **** {
 234:../core_cm3.c ****   mrs r0, control
 235:../core_cm3.c ****   bx lr
 236:../core_cm3.c **** }
 237:../core_cm3.c **** 
 238:../core_cm3.c **** /**
 239:../core_cm3.c ****  * @brief  Set the Control Register value
 240:../core_cm3.c ****  *
 241:../core_cm3.c ****  * @param  control  Control value
 242:../core_cm3.c ****  *
 243:../core_cm3.c ****  * Set the control register
 244:../core_cm3.c ****  */
 245:../core_cm3.c **** __ASM void __set_CONTROL(uint32_t control)
 246:../core_cm3.c **** {
 247:../core_cm3.c ****   msr control, r0
 248:../core_cm3.c ****   bx lr
 249:../core_cm3.c **** }
 250:../core_cm3.c **** 
 251:../core_cm3.c **** #endif /* __ARMCC_VERSION  */ 
 252:../core_cm3.c **** 
 253:../core_cm3.c **** 
 254:../core_cm3.c **** 
 255:../core_cm3.c **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 256:../core_cm3.c **** /* IAR iccarm specific functions */
 257:../core_cm3.c **** #pragma diag_suppress=Pe940
 258:../core_cm3.c **** 
 259:../core_cm3.c **** /**
 260:../core_cm3.c ****  * @brief  Return the Process Stack Pointer
 261:../core_cm3.c ****  *
 262:../core_cm3.c ****  * @return ProcessStackPointer
 263:../core_cm3.c ****  *
 264:../core_cm3.c ****  * Return the actual process stack pointer
 265:../core_cm3.c ****  */
 266:../core_cm3.c **** uint32_t __get_PSP(void)
 267:../core_cm3.c **** {
 268:../core_cm3.c ****   __ASM("mrs r0, psp");
 269:../core_cm3.c ****   __ASM("bx lr");
 270:../core_cm3.c **** }
 271:../core_cm3.c **** 
 272:../core_cm3.c **** /**
 273:../core_cm3.c ****  * @brief  Set the Process Stack Pointer
 274:../core_cm3.c ****  *
 275:../core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 276:../core_cm3.c ****  *
 277:../core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 278:../core_cm3.c ****  * (process stack pointer) Cortex processor register
 279:../core_cm3.c ****  */
 280:../core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 281:../core_cm3.c **** {
 282:../core_cm3.c ****   __ASM("msr psp, r0");
 283:../core_cm3.c ****   __ASM("bx lr");
 284:../core_cm3.c **** }
 285:../core_cm3.c **** 
 286:../core_cm3.c **** /**
 287:../core_cm3.c ****  * @brief  Return the Main Stack Pointer
 288:../core_cm3.c ****  *
 289:../core_cm3.c ****  * @return Main Stack Pointer
 290:../core_cm3.c ****  *
 291:../core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 292:../core_cm3.c ****  * Cortex processor register
 293:../core_cm3.c ****  */
 294:../core_cm3.c **** uint32_t __get_MSP(void)
 295:../core_cm3.c **** {
 296:../core_cm3.c ****   __ASM("mrs r0, msp");
 297:../core_cm3.c ****   __ASM("bx lr");
 298:../core_cm3.c **** }
 299:../core_cm3.c **** 
 300:../core_cm3.c **** /**
 301:../core_cm3.c ****  * @brief  Set the Main Stack Pointer
 302:../core_cm3.c ****  *
 303:../core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 304:../core_cm3.c ****  *
 305:../core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 306:../core_cm3.c ****  * (main stack pointer) Cortex processor register
 307:../core_cm3.c ****  */
 308:../core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 309:../core_cm3.c **** {
 310:../core_cm3.c ****   __ASM("msr msp, r0");
 311:../core_cm3.c ****   __ASM("bx lr");
 312:../core_cm3.c **** }
 313:../core_cm3.c **** 
 314:../core_cm3.c **** /**
 315:../core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 316:../core_cm3.c ****  *
 317:../core_cm3.c ****  * @param  value  value to reverse
 318:../core_cm3.c ****  * @return        reversed value
 319:../core_cm3.c ****  *
 320:../core_cm3.c ****  * Reverse byte order in unsigned short value
 321:../core_cm3.c ****  */
 322:../core_cm3.c **** uint32_t __REV16(uint16_t value)
 323:../core_cm3.c **** {
 324:../core_cm3.c ****   __ASM("rev16 r0, r0");
 325:../core_cm3.c ****   __ASM("bx lr");
 326:../core_cm3.c **** }
 327:../core_cm3.c **** 
 328:../core_cm3.c **** /**
 329:../core_cm3.c ****  * @brief  Reverse bit order of value
 330:../core_cm3.c ****  *
 331:../core_cm3.c ****  * @param  value  value to reverse
 332:../core_cm3.c ****  * @return        reversed value
 333:../core_cm3.c ****  *
 334:../core_cm3.c ****  * Reverse bit order of value
 335:../core_cm3.c ****  */
 336:../core_cm3.c **** uint32_t __RBIT(uint32_t value)
 337:../core_cm3.c **** {
 338:../core_cm3.c ****   __ASM("rbit r0, r0");
 339:../core_cm3.c ****   __ASM("bx lr");
 340:../core_cm3.c **** }
 341:../core_cm3.c **** 
 342:../core_cm3.c **** /**
 343:../core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 344:../core_cm3.c ****  *
 345:../core_cm3.c ****  * @param  *addr  address pointer
 346:../core_cm3.c ****  * @return        value of (*address)
 347:../core_cm3.c ****  *
 348:../core_cm3.c ****  * Exclusive LDR command for 8 bit values)
 349:../core_cm3.c ****  */
 350:../core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 351:../core_cm3.c **** {
 352:../core_cm3.c ****   __ASM("ldrexb r0, [r0]");
 353:../core_cm3.c ****   __ASM("bx lr"); 
 354:../core_cm3.c **** }
 355:../core_cm3.c **** 
 356:../core_cm3.c **** /**
 357:../core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 358:../core_cm3.c ****  *
 359:../core_cm3.c ****  * @param  *addr  address pointer
 360:../core_cm3.c ****  * @return        value of (*address)
 361:../core_cm3.c ****  *
 362:../core_cm3.c ****  * Exclusive LDR command for 16 bit values
 363:../core_cm3.c ****  */
 364:../core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 365:../core_cm3.c **** {
 366:../core_cm3.c ****   __ASM("ldrexh r0, [r0]");
 367:../core_cm3.c ****   __ASM("bx lr");
 368:../core_cm3.c **** }
 369:../core_cm3.c **** 
 370:../core_cm3.c **** /**
 371:../core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 372:../core_cm3.c ****  *
 373:../core_cm3.c ****  * @param  *addr  address pointer
 374:../core_cm3.c ****  * @return        value of (*address)
 375:../core_cm3.c ****  *
 376:../core_cm3.c ****  * Exclusive LDR command for 32 bit values
 377:../core_cm3.c ****  */
 378:../core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 379:../core_cm3.c **** {
 380:../core_cm3.c ****   __ASM("ldrex r0, [r0]");
 381:../core_cm3.c ****   __ASM("bx lr");
 382:../core_cm3.c **** }
 383:../core_cm3.c **** 
 384:../core_cm3.c **** /**
 385:../core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 386:../core_cm3.c ****  *
 387:../core_cm3.c ****  * @param  value  value to store
 388:../core_cm3.c ****  * @param  *addr  address pointer
 389:../core_cm3.c ****  * @return        successful / failed
 390:../core_cm3.c ****  *
 391:../core_cm3.c ****  * Exclusive STR command for 8 bit values
 392:../core_cm3.c ****  */
 393:../core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 394:../core_cm3.c **** {
 395:../core_cm3.c ****   __ASM("strexb r0, r0, [r1]");
 396:../core_cm3.c ****   __ASM("bx lr");
 397:../core_cm3.c **** }
 398:../core_cm3.c **** 
 399:../core_cm3.c **** /**
 400:../core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 401:../core_cm3.c ****  *
 402:../core_cm3.c ****  * @param  value  value to store
 403:../core_cm3.c ****  * @param  *addr  address pointer
 404:../core_cm3.c ****  * @return        successful / failed
 405:../core_cm3.c ****  *
 406:../core_cm3.c ****  * Exclusive STR command for 16 bit values
 407:../core_cm3.c ****  */
 408:../core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 409:../core_cm3.c **** {
 410:../core_cm3.c ****   __ASM("strexh r0, r0, [r1]");
 411:../core_cm3.c ****   __ASM("bx lr");
 412:../core_cm3.c **** }
 413:../core_cm3.c **** 
 414:../core_cm3.c **** /**
 415:../core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 416:../core_cm3.c ****  *
 417:../core_cm3.c ****  * @param  value  value to store
 418:../core_cm3.c ****  * @param  *addr  address pointer
 419:../core_cm3.c ****  * @return        successful / failed
 420:../core_cm3.c ****  *
 421:../core_cm3.c ****  * Exclusive STR command for 32 bit values
 422:../core_cm3.c ****  */
 423:../core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 424:../core_cm3.c **** {
 425:../core_cm3.c ****   __ASM("strex r0, r0, [r1]");
 426:../core_cm3.c ****   __ASM("bx lr");
 427:../core_cm3.c **** }
 428:../core_cm3.c **** 
 429:../core_cm3.c **** #pragma diag_default=Pe940
 430:../core_cm3.c **** 
 431:../core_cm3.c **** 
 432:../core_cm3.c **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 433:../core_cm3.c **** /* GNU gcc specific functions */
 434:../core_cm3.c **** 
 435:../core_cm3.c **** /**
 436:../core_cm3.c ****  * @brief  Return the Process Stack Pointer
 437:../core_cm3.c ****  *
 438:../core_cm3.c ****  * @return ProcessStackPointer
 439:../core_cm3.c ****  *
 440:../core_cm3.c ****  * Return the actual process stack pointer
 441:../core_cm3.c ****  */
 442:../core_cm3.c **** uint32_t __get_PSP(void) __attribute__( ( naked ) );
 443:../core_cm3.c **** uint32_t __get_PSP(void)
 444:../core_cm3.c **** {
 634              		.loc 1 444 0
 635              		.cfi_startproc
 636              		@ Naked Function: prologue and epilogue provided by programmer.
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 1, uses_anonymous_args = 0
 445:../core_cm3.c ****   uint32_t result=0;
 639              		.loc 1 445 0
 640 0000 4FF00004 		mov	r4, #0
 446:../core_cm3.c **** 
 447:../core_cm3.c ****   __ASM volatile ("MRS %0, psp\n\t" 
 641              		.loc 1 447 0
 642              	@ 447 "../core_cm3.c" 1
 643 0004 EFF30984 		MRS r4, psp
 644 0008 2046     		MOV r0, r4 
 645 000a 7047     		BX  lr     
 646              		
 647              	@ 0 "" 2
 448:../core_cm3.c ****                   "MOV r0, %0 \n\t"
 449:../core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 450:../core_cm3.c ****   return(result);
 648              		.loc 1 450 0
 649              		.thumb
 650 000c 2346     		mov	r3, r4
 451:../core_cm3.c **** }
 651              		.loc 1 451 0
 652 000e 1846     		mov	r0, r3
 653              		.cfi_endproc
 654              	.LFE0:
 656              		.align	2
 657              		.global	__set_PSP
 658              		.thumb
 659              		.thumb_func
 661              	__set_PSP:
 662              	.LFB1:
 452:../core_cm3.c **** 
 453:../core_cm3.c **** /**
 454:../core_cm3.c ****  * @brief  Set the Process Stack Pointer
 455:../core_cm3.c ****  *
 456:../core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 457:../core_cm3.c ****  *
 458:../core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 459:../core_cm3.c ****  * (process stack pointer) Cortex processor register
 460:../core_cm3.c ****  */
 461:../core_cm3.c **** void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
 462:../core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 463:../core_cm3.c **** {
 663              		.loc 1 463 0
 664              		.cfi_startproc
 665              		@ Naked Function: prologue and epilogue provided by programmer.
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668 0010 0346     		mov	r3, r0
 464:../core_cm3.c ****   __ASM volatile ("MSR psp, %0\n\t"
 669              		.loc 1 464 0
 670              	@ 464 "../core_cm3.c" 1
 671 0012 83F30988 		MSR psp, r3
 672 0016 7047     		BX  lr     
 673              		
 674              	@ 0 "" 2
 465:../core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfProcStack) );
 466:../core_cm3.c **** }
 675              		.loc 1 466 0
 676              		.thumb
 677              		.cfi_endproc
 678              	.LFE1:
 680              		.align	2
 681              		.global	__get_MSP
 682              		.thumb
 683              		.thumb_func
 685              	__get_MSP:
 686              	.LFB2:
 467:../core_cm3.c **** 
 468:../core_cm3.c **** /**
 469:../core_cm3.c ****  * @brief  Return the Main Stack Pointer
 470:../core_cm3.c ****  *
 471:../core_cm3.c ****  * @return Main Stack Pointer
 472:../core_cm3.c ****  *
 473:../core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 474:../core_cm3.c ****  * Cortex processor register
 475:../core_cm3.c ****  */
 476:../core_cm3.c **** uint32_t __get_MSP(void) __attribute__( ( naked ) );
 477:../core_cm3.c **** uint32_t __get_MSP(void)
 478:../core_cm3.c **** {
 687              		.loc 1 478 0
 688              		.cfi_startproc
 689              		@ Naked Function: prologue and epilogue provided by programmer.
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 1, uses_anonymous_args = 0
 479:../core_cm3.c ****   uint32_t result=0;
 692              		.loc 1 479 0
 693 0018 4FF00004 		mov	r4, #0
 480:../core_cm3.c **** 
 481:../core_cm3.c ****   __ASM volatile ("MRS %0, msp\n\t" 
 694              		.loc 1 481 0
 695              	@ 481 "../core_cm3.c" 1
 696 001c EFF30884 		MRS r4, msp
 697 0020 2046     		MOV r0, r4 
 698 0022 7047     		BX  lr     
 699              		
 700              	@ 0 "" 2
 482:../core_cm3.c ****                   "MOV r0, %0 \n\t"
 483:../core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 484:../core_cm3.c ****   return(result);
 701              		.loc 1 484 0
 702              		.thumb
 703 0024 2346     		mov	r3, r4
 485:../core_cm3.c **** }
 704              		.loc 1 485 0
 705 0026 1846     		mov	r0, r3
 706              		.cfi_endproc
 707              	.LFE2:
 709              		.align	2
 710              		.global	__set_MSP
 711              		.thumb
 712              		.thumb_func
 714              	__set_MSP:
 715              	.LFB3:
 486:../core_cm3.c **** 
 487:../core_cm3.c **** /**
 488:../core_cm3.c ****  * @brief  Set the Main Stack Pointer
 489:../core_cm3.c ****  *
 490:../core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 491:../core_cm3.c ****  *
 492:../core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 493:../core_cm3.c ****  * (main stack pointer) Cortex processor register
 494:../core_cm3.c ****  */
 495:../core_cm3.c **** void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
 496:../core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 497:../core_cm3.c **** {
 716              		.loc 1 497 0
 717              		.cfi_startproc
 718              		@ Naked Function: prologue and epilogue provided by programmer.
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721 0028 0346     		mov	r3, r0
 498:../core_cm3.c ****   __ASM volatile ("MSR msp, %0\n\t"
 722              		.loc 1 498 0
 723              	@ 498 "../core_cm3.c" 1
 724 002a 83F30888 		MSR msp, r3
 725 002e 7047     		BX  lr     
 726              		
 727              	@ 0 "" 2
 499:../core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfMainStack) );
 500:../core_cm3.c **** }
 728              		.loc 1 500 0
 729              		.thumb
 730              		.cfi_endproc
 731              	.LFE3:
 733              		.align	2
 734              		.global	__get_BASEPRI
 735              		.thumb
 736              		.thumb_func
 738              	__get_BASEPRI:
 739              	.LFB4:
 501:../core_cm3.c **** 
 502:../core_cm3.c **** /**
 503:../core_cm3.c ****  * @brief  Return the Base Priority value
 504:../core_cm3.c ****  *
 505:../core_cm3.c ****  * @return BasePriority
 506:../core_cm3.c ****  *
 507:../core_cm3.c ****  * Return the content of the base priority register
 508:../core_cm3.c ****  */
 509:../core_cm3.c **** uint32_t __get_BASEPRI(void)
 510:../core_cm3.c **** {
 740              		.loc 1 510 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 8
 743              		@ frame_needed = 1, uses_anonymous_args = 0
 744              		@ link register save eliminated.
 745 0030 80B4     		push	{r7}
 746              	.LCFI0:
 747              		.cfi_def_cfa_offset 4
 748 0032 83B0     		sub	sp, sp, #12
 749              	.LCFI1:
 750              		.cfi_def_cfa_offset 16
 751 0034 00AF     		add	r7, sp, #0
 752              		.cfi_offset 7, -4
 753              	.LCFI2:
 754              		.cfi_def_cfa_register 7
 511:../core_cm3.c ****   uint32_t result=0;
 755              		.loc 1 511 0
 756 0036 4FF00003 		mov	r3, #0
 757 003a 7B60     		str	r3, [r7, #4]
 512:../core_cm3.c ****   
 513:../core_cm3.c ****   __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 758              		.loc 1 513 0
 759              	@ 513 "../core_cm3.c" 1
 760 003c EFF31283 		MRS r3, basepri_max
 761              	@ 0 "" 2
 762              		.thumb
 763 0040 7B60     		str	r3, [r7, #4]
 514:../core_cm3.c ****   return(result);
 764              		.loc 1 514 0
 765 0042 7B68     		ldr	r3, [r7, #4]
 515:../core_cm3.c **** }
 766              		.loc 1 515 0
 767 0044 1846     		mov	r0, r3
 768 0046 07F10C07 		add	r7, r7, #12
 769 004a BD46     		mov	sp, r7
 770 004c 80BC     		pop	{r7}
 771 004e 7047     		bx	lr
 772              		.cfi_endproc
 773              	.LFE4:
 775              		.align	2
 776              		.global	__set_BASEPRI
 777              		.thumb
 778              		.thumb_func
 780              	__set_BASEPRI:
 781              	.LFB5:
 516:../core_cm3.c **** 
 517:../core_cm3.c **** /**
 518:../core_cm3.c ****  * @brief  Set the Base Priority value
 519:../core_cm3.c ****  *
 520:../core_cm3.c ****  * @param  basePri  BasePriority
 521:../core_cm3.c ****  *
 522:../core_cm3.c ****  * Set the base priority register
 523:../core_cm3.c ****  */
 524:../core_cm3.c **** void __set_BASEPRI(uint32_t value)
 525:../core_cm3.c **** {
 782              		.loc 1 525 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 8
 785              		@ frame_needed = 1, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787 0050 80B4     		push	{r7}
 788              	.LCFI3:
 789              		.cfi_def_cfa_offset 4
 790 0052 83B0     		sub	sp, sp, #12
 791              	.LCFI4:
 792              		.cfi_def_cfa_offset 16
 793 0054 00AF     		add	r7, sp, #0
 794              		.cfi_offset 7, -4
 795              	.LCFI5:
 796              		.cfi_def_cfa_register 7
 797 0056 7860     		str	r0, [r7, #4]
 526:../core_cm3.c ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 798              		.loc 1 526 0
 799 0058 7B68     		ldr	r3, [r7, #4]
 800              	@ 526 "../core_cm3.c" 1
 801 005a 83F31188 		MSR basepri, r3
 802              	@ 0 "" 2
 527:../core_cm3.c **** }
 803              		.loc 1 527 0
 804              		.thumb
 805 005e 07F10C07 		add	r7, r7, #12
 806 0062 BD46     		mov	sp, r7
 807 0064 80BC     		pop	{r7}
 808 0066 7047     		bx	lr
 809              		.cfi_endproc
 810              	.LFE5:
 812              		.align	2
 813              		.global	__get_PRIMASK
 814              		.thumb
 815              		.thumb_func
 817              	__get_PRIMASK:
 818              	.LFB6:
 528:../core_cm3.c **** 
 529:../core_cm3.c **** /**
 530:../core_cm3.c ****  * @brief  Return the Priority Mask value
 531:../core_cm3.c ****  *
 532:../core_cm3.c ****  * @return PriMask
 533:../core_cm3.c ****  *
 534:../core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 535:../core_cm3.c ****  */
 536:../core_cm3.c **** uint32_t __get_PRIMASK(void)
 537:../core_cm3.c **** {
 819              		.loc 1 537 0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 8
 822              		@ frame_needed = 1, uses_anonymous_args = 0
 823              		@ link register save eliminated.
 824 0068 80B4     		push	{r7}
 825              	.LCFI6:
 826              		.cfi_def_cfa_offset 4
 827 006a 83B0     		sub	sp, sp, #12
 828              	.LCFI7:
 829              		.cfi_def_cfa_offset 16
 830 006c 00AF     		add	r7, sp, #0
 831              		.cfi_offset 7, -4
 832              	.LCFI8:
 833              		.cfi_def_cfa_register 7
 538:../core_cm3.c ****   uint32_t result=0;
 834              		.loc 1 538 0
 835 006e 4FF00003 		mov	r3, #0
 836 0072 7B60     		str	r3, [r7, #4]
 539:../core_cm3.c **** 
 540:../core_cm3.c ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 837              		.loc 1 540 0
 838              	@ 540 "../core_cm3.c" 1
 839 0074 EFF31083 		MRS r3, primask
 840              	@ 0 "" 2
 841              		.thumb
 842 0078 7B60     		str	r3, [r7, #4]
 541:../core_cm3.c ****   return(result);
 843              		.loc 1 541 0
 844 007a 7B68     		ldr	r3, [r7, #4]
 542:../core_cm3.c **** }
 845              		.loc 1 542 0
 846 007c 1846     		mov	r0, r3
 847 007e 07F10C07 		add	r7, r7, #12
 848 0082 BD46     		mov	sp, r7
 849 0084 80BC     		pop	{r7}
 850 0086 7047     		bx	lr
 851              		.cfi_endproc
 852              	.LFE6:
 854              		.align	2
 855              		.global	__set_PRIMASK
 856              		.thumb
 857              		.thumb_func
 859              	__set_PRIMASK:
 860              	.LFB7:
 543:../core_cm3.c **** 
 544:../core_cm3.c **** /**
 545:../core_cm3.c ****  * @brief  Set the Priority Mask value
 546:../core_cm3.c ****  *
 547:../core_cm3.c ****  * @param  priMask  PriMask
 548:../core_cm3.c ****  *
 549:../core_cm3.c ****  * Set the priority mask bit in the priority mask register
 550:../core_cm3.c ****  */
 551:../core_cm3.c **** void __set_PRIMASK(uint32_t priMask)
 552:../core_cm3.c **** {
 861              		.loc 1 552 0
 862              		.cfi_startproc
 863              		@ args = 0, pretend = 0, frame = 8
 864              		@ frame_needed = 1, uses_anonymous_args = 0
 865              		@ link register save eliminated.
 866 0088 80B4     		push	{r7}
 867              	.LCFI9:
 868              		.cfi_def_cfa_offset 4
 869 008a 83B0     		sub	sp, sp, #12
 870              	.LCFI10:
 871              		.cfi_def_cfa_offset 16
 872 008c 00AF     		add	r7, sp, #0
 873              		.cfi_offset 7, -4
 874              	.LCFI11:
 875              		.cfi_def_cfa_register 7
 876 008e 7860     		str	r0, [r7, #4]
 553:../core_cm3.c ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 877              		.loc 1 553 0
 878 0090 7B68     		ldr	r3, [r7, #4]
 879              	@ 553 "../core_cm3.c" 1
 880 0092 83F31088 		MSR primask, r3
 881              	@ 0 "" 2
 554:../core_cm3.c **** }
 882              		.loc 1 554 0
 883              		.thumb
 884 0096 07F10C07 		add	r7, r7, #12
 885 009a BD46     		mov	sp, r7
 886 009c 80BC     		pop	{r7}
 887 009e 7047     		bx	lr
 888              		.cfi_endproc
 889              	.LFE7:
 891              		.align	2
 892              		.global	__get_FAULTMASK
 893              		.thumb
 894              		.thumb_func
 896              	__get_FAULTMASK:
 897              	.LFB8:
 555:../core_cm3.c **** 
 556:../core_cm3.c **** /**
 557:../core_cm3.c ****  * @brief  Return the Fault Mask value
 558:../core_cm3.c ****  *
 559:../core_cm3.c ****  * @return FaultMask
 560:../core_cm3.c ****  *
 561:../core_cm3.c ****  * Return the content of the fault mask register
 562:../core_cm3.c ****  */
 563:../core_cm3.c **** uint32_t __get_FAULTMASK(void)
 564:../core_cm3.c **** {
 898              		.loc 1 564 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 8
 901              		@ frame_needed = 1, uses_anonymous_args = 0
 902              		@ link register save eliminated.
 903 00a0 80B4     		push	{r7}
 904              	.LCFI12:
 905              		.cfi_def_cfa_offset 4
 906 00a2 83B0     		sub	sp, sp, #12
 907              	.LCFI13:
 908              		.cfi_def_cfa_offset 16
 909 00a4 00AF     		add	r7, sp, #0
 910              		.cfi_offset 7, -4
 911              	.LCFI14:
 912              		.cfi_def_cfa_register 7
 565:../core_cm3.c ****   uint32_t result=0;
 913              		.loc 1 565 0
 914 00a6 4FF00003 		mov	r3, #0
 915 00aa 7B60     		str	r3, [r7, #4]
 566:../core_cm3.c ****   
 567:../core_cm3.c ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 916              		.loc 1 567 0
 917              	@ 567 "../core_cm3.c" 1
 918 00ac EFF31383 		MRS r3, faultmask
 919              	@ 0 "" 2
 920              		.thumb
 921 00b0 7B60     		str	r3, [r7, #4]
 568:../core_cm3.c ****   return(result);
 922              		.loc 1 568 0
 923 00b2 7B68     		ldr	r3, [r7, #4]
 569:../core_cm3.c **** }
 924              		.loc 1 569 0
 925 00b4 1846     		mov	r0, r3
 926 00b6 07F10C07 		add	r7, r7, #12
 927 00ba BD46     		mov	sp, r7
 928 00bc 80BC     		pop	{r7}
 929 00be 7047     		bx	lr
 930              		.cfi_endproc
 931              	.LFE8:
 933              		.align	2
 934              		.global	__set_FAULTMASK
 935              		.thumb
 936              		.thumb_func
 938              	__set_FAULTMASK:
 939              	.LFB9:
 570:../core_cm3.c **** 
 571:../core_cm3.c **** /**
 572:../core_cm3.c ****  * @brief  Set the Fault Mask value
 573:../core_cm3.c ****  *
 574:../core_cm3.c ****  * @param  faultMask  faultMask value
 575:../core_cm3.c ****  *
 576:../core_cm3.c ****  * Set the fault mask register
 577:../core_cm3.c ****  */
 578:../core_cm3.c **** void __set_FAULTMASK(uint32_t faultMask)
 579:../core_cm3.c **** {
 940              		.loc 1 579 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 8
 943              		@ frame_needed = 1, uses_anonymous_args = 0
 944              		@ link register save eliminated.
 945 00c0 80B4     		push	{r7}
 946              	.LCFI15:
 947              		.cfi_def_cfa_offset 4
 948 00c2 83B0     		sub	sp, sp, #12
 949              	.LCFI16:
 950              		.cfi_def_cfa_offset 16
 951 00c4 00AF     		add	r7, sp, #0
 952              		.cfi_offset 7, -4
 953              	.LCFI17:
 954              		.cfi_def_cfa_register 7
 955 00c6 7860     		str	r0, [r7, #4]
 580:../core_cm3.c ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 956              		.loc 1 580 0
 957 00c8 7B68     		ldr	r3, [r7, #4]
 958              	@ 580 "../core_cm3.c" 1
 959 00ca 83F31388 		MSR faultmask, r3
 960              	@ 0 "" 2
 581:../core_cm3.c **** }
 961              		.loc 1 581 0
 962              		.thumb
 963 00ce 07F10C07 		add	r7, r7, #12
 964 00d2 BD46     		mov	sp, r7
 965 00d4 80BC     		pop	{r7}
 966 00d6 7047     		bx	lr
 967              		.cfi_endproc
 968              	.LFE9:
 970              		.align	2
 971              		.global	__get_CONTROL
 972              		.thumb
 973              		.thumb_func
 975              	__get_CONTROL:
 976              	.LFB10:
 582:../core_cm3.c **** 
 583:../core_cm3.c **** /**
 584:../core_cm3.c ****  * @brief  Return the Control Register value
 585:../core_cm3.c **** * 
 586:../core_cm3.c **** *  @return Control value
 587:../core_cm3.c ****  *
 588:../core_cm3.c ****  * Return the content of the control register
 589:../core_cm3.c ****  */
 590:../core_cm3.c **** uint32_t __get_CONTROL(void)
 591:../core_cm3.c **** {
 977              		.loc 1 591 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 8
 980              		@ frame_needed = 1, uses_anonymous_args = 0
 981              		@ link register save eliminated.
 982 00d8 80B4     		push	{r7}
 983              	.LCFI18:
 984              		.cfi_def_cfa_offset 4
 985 00da 83B0     		sub	sp, sp, #12
 986              	.LCFI19:
 987              		.cfi_def_cfa_offset 16
 988 00dc 00AF     		add	r7, sp, #0
 989              		.cfi_offset 7, -4
 990              	.LCFI20:
 991              		.cfi_def_cfa_register 7
 592:../core_cm3.c ****   uint32_t result=0;
 992              		.loc 1 592 0
 993 00de 4FF00003 		mov	r3, #0
 994 00e2 7B60     		str	r3, [r7, #4]
 593:../core_cm3.c **** 
 594:../core_cm3.c ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 995              		.loc 1 594 0
 996              	@ 594 "../core_cm3.c" 1
 997 00e4 EFF31483 		MRS r3, control
 998              	@ 0 "" 2
 999              		.thumb
 1000 00e8 7B60     		str	r3, [r7, #4]
 595:../core_cm3.c ****   return(result);
 1001              		.loc 1 595 0
 1002 00ea 7B68     		ldr	r3, [r7, #4]
 596:../core_cm3.c **** }
 1003              		.loc 1 596 0
 1004 00ec 1846     		mov	r0, r3
 1005 00ee 07F10C07 		add	r7, r7, #12
 1006 00f2 BD46     		mov	sp, r7
 1007 00f4 80BC     		pop	{r7}
 1008 00f6 7047     		bx	lr
 1009              		.cfi_endproc
 1010              	.LFE10:
 1012              		.align	2
 1013              		.global	__set_CONTROL
 1014              		.thumb
 1015              		.thumb_func
 1017              	__set_CONTROL:
 1018              	.LFB11:
 597:../core_cm3.c **** 
 598:../core_cm3.c **** /**
 599:../core_cm3.c ****  * @brief  Set the Control Register value
 600:../core_cm3.c ****  *
 601:../core_cm3.c ****  * @param  control  Control value
 602:../core_cm3.c ****  *
 603:../core_cm3.c ****  * Set the control register
 604:../core_cm3.c ****  */
 605:../core_cm3.c **** void __set_CONTROL(uint32_t control)
 606:../core_cm3.c **** {
 1019              		.loc 1 606 0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 8
 1022              		@ frame_needed = 1, uses_anonymous_args = 0
 1023              		@ link register save eliminated.
 1024 00f8 80B4     		push	{r7}
 1025              	.LCFI21:
 1026              		.cfi_def_cfa_offset 4
 1027 00fa 83B0     		sub	sp, sp, #12
 1028              	.LCFI22:
 1029              		.cfi_def_cfa_offset 16
 1030 00fc 00AF     		add	r7, sp, #0
 1031              		.cfi_offset 7, -4
 1032              	.LCFI23:
 1033              		.cfi_def_cfa_register 7
 1034 00fe 7860     		str	r0, [r7, #4]
 607:../core_cm3.c ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 1035              		.loc 1 607 0
 1036 0100 7B68     		ldr	r3, [r7, #4]
 1037              	@ 607 "../core_cm3.c" 1
 1038 0102 83F31488 		MSR control, r3
 1039              	@ 0 "" 2
 608:../core_cm3.c **** }
 1040              		.loc 1 608 0
 1041              		.thumb
 1042 0106 07F10C07 		add	r7, r7, #12
 1043 010a BD46     		mov	sp, r7
 1044 010c 80BC     		pop	{r7}
 1045 010e 7047     		bx	lr
 1046              		.cfi_endproc
 1047              	.LFE11:
 1049              		.align	2
 1050              		.global	__REV
 1051              		.thumb
 1052              		.thumb_func
 1054              	__REV:
 1055              	.LFB12:
 609:../core_cm3.c **** 
 610:../core_cm3.c **** 
 611:../core_cm3.c **** /**
 612:../core_cm3.c ****  * @brief  Reverse byte order in integer value
 613:../core_cm3.c ****  *
 614:../core_cm3.c ****  * @param  value  value to reverse
 615:../core_cm3.c ****  * @return        reversed value
 616:../core_cm3.c ****  *
 617:../core_cm3.c ****  * Reverse byte order in integer value
 618:../core_cm3.c ****  */
 619:../core_cm3.c **** uint32_t __REV(uint32_t value)
 620:../core_cm3.c **** {
 1056              		.loc 1 620 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 16
 1059              		@ frame_needed = 1, uses_anonymous_args = 0
 1060              		@ link register save eliminated.
 1061 0110 80B4     		push	{r7}
 1062              	.LCFI24:
 1063              		.cfi_def_cfa_offset 4
 1064 0112 85B0     		sub	sp, sp, #20
 1065              	.LCFI25:
 1066              		.cfi_def_cfa_offset 24
 1067 0114 00AF     		add	r7, sp, #0
 1068              		.cfi_offset 7, -4
 1069              	.LCFI26:
 1070              		.cfi_def_cfa_register 7
 1071 0116 7860     		str	r0, [r7, #4]
 621:../core_cm3.c ****   uint32_t result=0;
 1072              		.loc 1 621 0
 1073 0118 4FF00003 		mov	r3, #0
 1074 011c FB60     		str	r3, [r7, #12]
 622:../core_cm3.c ****   
 623:../core_cm3.c ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 1075              		.loc 1 623 0
 1076 011e 7B68     		ldr	r3, [r7, #4]
 1077              	@ 623 "../core_cm3.c" 1
 1078 0120 1BBA     		rev r3, r3
 1079              	@ 0 "" 2
 1080              		.thumb
 1081 0122 FB60     		str	r3, [r7, #12]
 624:../core_cm3.c ****   return(result);
 1082              		.loc 1 624 0
 1083 0124 FB68     		ldr	r3, [r7, #12]
 625:../core_cm3.c **** }
 1084              		.loc 1 625 0
 1085 0126 1846     		mov	r0, r3
 1086 0128 07F11407 		add	r7, r7, #20
 1087 012c BD46     		mov	sp, r7
 1088 012e 80BC     		pop	{r7}
 1089 0130 7047     		bx	lr
 1090              		.cfi_endproc
 1091              	.LFE12:
 1093 0132 00BF     		.align	2
 1094              		.global	__REV16
 1095              		.thumb
 1096              		.thumb_func
 1098              	__REV16:
 1099              	.LFB13:
 626:../core_cm3.c **** 
 627:../core_cm3.c **** /**
 628:../core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 629:../core_cm3.c ****  *
 630:../core_cm3.c ****  * @param  value  value to reverse
 631:../core_cm3.c ****  * @return        reversed value
 632:../core_cm3.c ****  *
 633:../core_cm3.c ****  * Reverse byte order in unsigned short value
 634:../core_cm3.c ****  */
 635:../core_cm3.c **** uint32_t __REV16(uint16_t value)
 636:../core_cm3.c **** {
 1100              		.loc 1 636 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 16
 1103              		@ frame_needed = 1, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105 0134 80B4     		push	{r7}
 1106              	.LCFI27:
 1107              		.cfi_def_cfa_offset 4
 1108 0136 85B0     		sub	sp, sp, #20
 1109              	.LCFI28:
 1110              		.cfi_def_cfa_offset 24
 1111 0138 00AF     		add	r7, sp, #0
 1112              		.cfi_offset 7, -4
 1113              	.LCFI29:
 1114              		.cfi_def_cfa_register 7
 1115 013a 0346     		mov	r3, r0
 1116 013c FB80     		strh	r3, [r7, #6]	@ movhi
 637:../core_cm3.c ****   uint32_t result=0;
 1117              		.loc 1 637 0
 1118 013e 4FF00003 		mov	r3, #0
 1119 0142 FB60     		str	r3, [r7, #12]
 638:../core_cm3.c ****   
 639:../core_cm3.c ****   __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 1120              		.loc 1 639 0
 1121 0144 FB88     		ldrh	r3, [r7, #6]	@ movhi
 1122              	@ 639 "../core_cm3.c" 1
 1123 0146 5BBA     		rev16 r3, r3
 1124              	@ 0 "" 2
 1125              		.thumb
 1126 0148 FB60     		str	r3, [r7, #12]
 640:../core_cm3.c ****   return(result);
 1127              		.loc 1 640 0
 1128 014a FB68     		ldr	r3, [r7, #12]
 641:../core_cm3.c **** }
 1129              		.loc 1 641 0
 1130 014c 1846     		mov	r0, r3
 1131 014e 07F11407 		add	r7, r7, #20
 1132 0152 BD46     		mov	sp, r7
 1133 0154 80BC     		pop	{r7}
 1134 0156 7047     		bx	lr
 1135              		.cfi_endproc
 1136              	.LFE13:
 1138              		.align	2
 1139              		.global	__REVSH
 1140              		.thumb
 1141              		.thumb_func
 1143              	__REVSH:
 1144              	.LFB14:
 642:../core_cm3.c **** 
 643:../core_cm3.c **** /**
 644:../core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 645:../core_cm3.c ****  *
 646:../core_cm3.c ****  * @param  value  value to reverse
 647:../core_cm3.c ****  * @return        reversed value
 648:../core_cm3.c ****  *
 649:../core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 650:../core_cm3.c ****  */
 651:../core_cm3.c **** int32_t __REVSH(int16_t value)
 652:../core_cm3.c **** {
 1145              		.loc 1 652 0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 16
 1148              		@ frame_needed = 1, uses_anonymous_args = 0
 1149              		@ link register save eliminated.
 1150 0158 80B4     		push	{r7}
 1151              	.LCFI30:
 1152              		.cfi_def_cfa_offset 4
 1153 015a 85B0     		sub	sp, sp, #20
 1154              	.LCFI31:
 1155              		.cfi_def_cfa_offset 24
 1156 015c 00AF     		add	r7, sp, #0
 1157              		.cfi_offset 7, -4
 1158              	.LCFI32:
 1159              		.cfi_def_cfa_register 7
 1160 015e 0346     		mov	r3, r0
 1161 0160 FB80     		strh	r3, [r7, #6]	@ movhi
 653:../core_cm3.c ****   uint32_t result=0;
 1162              		.loc 1 653 0
 1163 0162 4FF00003 		mov	r3, #0
 1164 0166 FB60     		str	r3, [r7, #12]
 654:../core_cm3.c ****   
 655:../core_cm3.c ****   __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 1165              		.loc 1 655 0
 1166 0168 FB88     		ldrh	r3, [r7, #6]	@ movhi
 1167              	@ 655 "../core_cm3.c" 1
 1168 016a DBBA     		revsh r3, r3
 1169              	@ 0 "" 2
 1170              		.thumb
 1171 016c FB60     		str	r3, [r7, #12]
 656:../core_cm3.c ****   return(result);
 1172              		.loc 1 656 0
 1173 016e FB68     		ldr	r3, [r7, #12]
 657:../core_cm3.c **** }
 1174              		.loc 1 657 0
 1175 0170 1846     		mov	r0, r3
 1176 0172 07F11407 		add	r7, r7, #20
 1177 0176 BD46     		mov	sp, r7
 1178 0178 80BC     		pop	{r7}
 1179 017a 7047     		bx	lr
 1180              		.cfi_endproc
 1181              	.LFE14:
 1183              		.align	2
 1184              		.global	__RBIT
 1185              		.thumb
 1186              		.thumb_func
 1188              	__RBIT:
 1189              	.LFB15:
 658:../core_cm3.c **** 
 659:../core_cm3.c **** /**
 660:../core_cm3.c ****  * @brief  Reverse bit order of value
 661:../core_cm3.c ****  *
 662:../core_cm3.c ****  * @param  value  value to reverse
 663:../core_cm3.c ****  * @return        reversed value
 664:../core_cm3.c ****  *
 665:../core_cm3.c ****  * Reverse bit order of value
 666:../core_cm3.c ****  */
 667:../core_cm3.c **** uint32_t __RBIT(uint32_t value)
 668:../core_cm3.c **** {
 1190              		.loc 1 668 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 16
 1193              		@ frame_needed = 1, uses_anonymous_args = 0
 1194              		@ link register save eliminated.
 1195 017c 80B4     		push	{r7}
 1196              	.LCFI33:
 1197              		.cfi_def_cfa_offset 4
 1198 017e 85B0     		sub	sp, sp, #20
 1199              	.LCFI34:
 1200              		.cfi_def_cfa_offset 24
 1201 0180 00AF     		add	r7, sp, #0
 1202              		.cfi_offset 7, -4
 1203              	.LCFI35:
 1204              		.cfi_def_cfa_register 7
 1205 0182 7860     		str	r0, [r7, #4]
 669:../core_cm3.c ****   uint32_t result=0;
 1206              		.loc 1 669 0
 1207 0184 4FF00003 		mov	r3, #0
 1208 0188 FB60     		str	r3, [r7, #12]
 670:../core_cm3.c ****   
 671:../core_cm3.c ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1209              		.loc 1 671 0
 1210 018a 7B68     		ldr	r3, [r7, #4]
 1211              	@ 671 "../core_cm3.c" 1
 1212 018c 93FAA3F3 		rbit r3, r3
 1213              	@ 0 "" 2
 1214              		.thumb
 1215 0190 FB60     		str	r3, [r7, #12]
 672:../core_cm3.c ****    return(result);
 1216              		.loc 1 672 0
 1217 0192 FB68     		ldr	r3, [r7, #12]
 673:../core_cm3.c **** }
 1218              		.loc 1 673 0
 1219 0194 1846     		mov	r0, r3
 1220 0196 07F11407 		add	r7, r7, #20
 1221 019a BD46     		mov	sp, r7
 1222 019c 80BC     		pop	{r7}
 1223 019e 7047     		bx	lr
 1224              		.cfi_endproc
 1225              	.LFE15:
 1227              		.align	2
 1228              		.global	__LDREXB
 1229              		.thumb
 1230              		.thumb_func
 1232              	__LDREXB:
 1233              	.LFB16:
 674:../core_cm3.c **** 
 675:../core_cm3.c **** /**
 676:../core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 677:../core_cm3.c ****  *
 678:../core_cm3.c ****  * @param  *addr  address pointer
 679:../core_cm3.c ****  * @return        value of (*address)
 680:../core_cm3.c ****  *
 681:../core_cm3.c ****  * Exclusive LDR command for 8 bit value
 682:../core_cm3.c ****  */
 683:../core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 684:../core_cm3.c **** {
 1234              		.loc 1 684 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 16
 1237              		@ frame_needed = 1, uses_anonymous_args = 0
 1238              		@ link register save eliminated.
 1239 01a0 80B4     		push	{r7}
 1240              	.LCFI36:
 1241              		.cfi_def_cfa_offset 4
 1242 01a2 85B0     		sub	sp, sp, #20
 1243              	.LCFI37:
 1244              		.cfi_def_cfa_offset 24
 1245 01a4 00AF     		add	r7, sp, #0
 1246              		.cfi_offset 7, -4
 1247              	.LCFI38:
 1248              		.cfi_def_cfa_register 7
 1249 01a6 7860     		str	r0, [r7, #4]
 685:../core_cm3.c ****     uint8_t result=0;
 1250              		.loc 1 685 0
 1251 01a8 4FF00003 		mov	r3, #0
 1252 01ac FB73     		strb	r3, [r7, #15]
 686:../core_cm3.c ****   
 687:../core_cm3.c ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 1253              		.loc 1 687 0
 1254 01ae 7B68     		ldr	r3, [r7, #4]
 1255              	@ 687 "../core_cm3.c" 1
 1256 01b0 D3E84F3F 		ldrexb r3, [r3]
 1257              	@ 0 "" 2
 1258              		.thumb
 1259 01b4 FB73     		strb	r3, [r7, #15]
 688:../core_cm3.c ****    return(result);
 1260              		.loc 1 688 0
 1261 01b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 689:../core_cm3.c **** }
 1262              		.loc 1 689 0
 1263 01b8 1846     		mov	r0, r3
 1264 01ba 07F11407 		add	r7, r7, #20
 1265 01be BD46     		mov	sp, r7
 1266 01c0 80BC     		pop	{r7}
 1267 01c2 7047     		bx	lr
 1268              		.cfi_endproc
 1269              	.LFE16:
 1271              		.align	2
 1272              		.global	__LDREXH
 1273              		.thumb
 1274              		.thumb_func
 1276              	__LDREXH:
 1277              	.LFB17:
 690:../core_cm3.c **** 
 691:../core_cm3.c **** /**
 692:../core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 693:../core_cm3.c ****  *
 694:../core_cm3.c ****  * @param  *addr  address pointer
 695:../core_cm3.c ****  * @return        value of (*address)
 696:../core_cm3.c ****  *
 697:../core_cm3.c ****  * Exclusive LDR command for 16 bit values
 698:../core_cm3.c ****  */
 699:../core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 700:../core_cm3.c **** {
 1278              		.loc 1 700 0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 16
 1281              		@ frame_needed = 1, uses_anonymous_args = 0
 1282              		@ link register save eliminated.
 1283 01c4 80B4     		push	{r7}
 1284              	.LCFI39:
 1285              		.cfi_def_cfa_offset 4
 1286 01c6 85B0     		sub	sp, sp, #20
 1287              	.LCFI40:
 1288              		.cfi_def_cfa_offset 24
 1289 01c8 00AF     		add	r7, sp, #0
 1290              		.cfi_offset 7, -4
 1291              	.LCFI41:
 1292              		.cfi_def_cfa_register 7
 1293 01ca 7860     		str	r0, [r7, #4]
 701:../core_cm3.c ****     uint16_t result=0;
 1294              		.loc 1 701 0
 1295 01cc 4FF00003 		mov	r3, #0
 1296 01d0 FB81     		strh	r3, [r7, #14]	@ movhi
 702:../core_cm3.c ****   
 703:../core_cm3.c ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 1297              		.loc 1 703 0
 1298 01d2 7B68     		ldr	r3, [r7, #4]
 1299              	@ 703 "../core_cm3.c" 1
 1300 01d4 D3E85F3F 		ldrexh r3, [r3]
 1301              	@ 0 "" 2
 1302              		.thumb
 1303 01d8 FB81     		strh	r3, [r7, #14]	@ movhi
 704:../core_cm3.c ****    return(result);
 1304              		.loc 1 704 0
 1305 01da FB89     		ldrh	r3, [r7, #14]
 705:../core_cm3.c **** }
 1306              		.loc 1 705 0
 1307 01dc 1846     		mov	r0, r3
 1308 01de 07F11407 		add	r7, r7, #20
 1309 01e2 BD46     		mov	sp, r7
 1310 01e4 80BC     		pop	{r7}
 1311 01e6 7047     		bx	lr
 1312              		.cfi_endproc
 1313              	.LFE17:
 1315              		.align	2
 1316              		.global	__LDREXW
 1317              		.thumb
 1318              		.thumb_func
 1320              	__LDREXW:
 1321              	.LFB18:
 706:../core_cm3.c **** 
 707:../core_cm3.c **** /**
 708:../core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 709:../core_cm3.c ****  *
 710:../core_cm3.c ****  * @param  *addr  address pointer
 711:../core_cm3.c ****  * @return        value of (*address)
 712:../core_cm3.c ****  *
 713:../core_cm3.c ****  * Exclusive LDR command for 32 bit values
 714:../core_cm3.c ****  */
 715:../core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 716:../core_cm3.c **** {
 1322              		.loc 1 716 0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 16
 1325              		@ frame_needed = 1, uses_anonymous_args = 0
 1326              		@ link register save eliminated.
 1327 01e8 80B4     		push	{r7}
 1328              	.LCFI42:
 1329              		.cfi_def_cfa_offset 4
 1330 01ea 85B0     		sub	sp, sp, #20
 1331              	.LCFI43:
 1332              		.cfi_def_cfa_offset 24
 1333 01ec 00AF     		add	r7, sp, #0
 1334              		.cfi_offset 7, -4
 1335              	.LCFI44:
 1336              		.cfi_def_cfa_register 7
 1337 01ee 7860     		str	r0, [r7, #4]
 717:../core_cm3.c ****     uint32_t result=0;
 1338              		.loc 1 717 0
 1339 01f0 4FF00003 		mov	r3, #0
 1340 01f4 FB60     		str	r3, [r7, #12]
 718:../core_cm3.c ****   
 719:../core_cm3.c ****    __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 1341              		.loc 1 719 0
 1342 01f6 7B68     		ldr	r3, [r7, #4]
 1343              	@ 719 "../core_cm3.c" 1
 1344 01f8 53E8003F 		ldrex r3, [r3]
 1345              	@ 0 "" 2
 1346              		.thumb
 1347 01fc FB60     		str	r3, [r7, #12]
 720:../core_cm3.c ****    return(result);
 1348              		.loc 1 720 0
 1349 01fe FB68     		ldr	r3, [r7, #12]
 721:../core_cm3.c **** }
 1350              		.loc 1 721 0
 1351 0200 1846     		mov	r0, r3
 1352 0202 07F11407 		add	r7, r7, #20
 1353 0206 BD46     		mov	sp, r7
 1354 0208 80BC     		pop	{r7}
 1355 020a 7047     		bx	lr
 1356              		.cfi_endproc
 1357              	.LFE18:
 1359              		.align	2
 1360              		.global	__STREXB
 1361              		.thumb
 1362              		.thumb_func
 1364              	__STREXB:
 1365              	.LFB19:
 722:../core_cm3.c **** 
 723:../core_cm3.c **** /**
 724:../core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 725:../core_cm3.c ****  *
 726:../core_cm3.c ****  * @param  value  value to store
 727:../core_cm3.c ****  * @param  *addr  address pointer
 728:../core_cm3.c ****  * @return        successful / failed
 729:../core_cm3.c ****  *
 730:../core_cm3.c ****  * Exclusive STR command for 8 bit values
 731:../core_cm3.c ****  */
 732:../core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 733:../core_cm3.c **** {
 1366              		.loc 1 733 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 16
 1369              		@ frame_needed = 1, uses_anonymous_args = 0
 1370              		@ link register save eliminated.
 1371 020c 80B4     		push	{r7}
 1372              	.LCFI45:
 1373              		.cfi_def_cfa_offset 4
 1374 020e 85B0     		sub	sp, sp, #20
 1375              	.LCFI46:
 1376              		.cfi_def_cfa_offset 24
 1377 0210 00AF     		add	r7, sp, #0
 1378              		.cfi_offset 7, -4
 1379              	.LCFI47:
 1380              		.cfi_def_cfa_register 7
 1381 0212 0346     		mov	r3, r0
 1382 0214 3960     		str	r1, [r7, #0]
 1383 0216 FB71     		strb	r3, [r7, #7]
 734:../core_cm3.c ****    uint32_t result=0;
 1384              		.loc 1 734 0
 1385 0218 4FF00003 		mov	r3, #0
 1386 021c FB60     		str	r3, [r7, #12]
 735:../core_cm3.c ****   
 736:../core_cm3.c ****    __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 1387              		.loc 1 736 0
 1388 021e 3B68     		ldr	r3, [r7, #0]
 1389 0220 FA79     		ldrb	r2, [r7, #7]
 1390              	@ 736 "../core_cm3.c" 1
 1391 0222 C3E8432F 		strexb r3, r2, [r3]
 1392              	@ 0 "" 2
 1393              		.thumb
 1394 0226 FB60     		str	r3, [r7, #12]
 737:../core_cm3.c ****    return(result);
 1395              		.loc 1 737 0
 1396 0228 FB68     		ldr	r3, [r7, #12]
 738:../core_cm3.c **** }
 1397              		.loc 1 738 0
 1398 022a 1846     		mov	r0, r3
 1399 022c 07F11407 		add	r7, r7, #20
 1400 0230 BD46     		mov	sp, r7
 1401 0232 80BC     		pop	{r7}
 1402 0234 7047     		bx	lr
 1403              		.cfi_endproc
 1404              	.LFE19:
 1406 0236 00BF     		.align	2
 1407              		.global	__STREXH
 1408              		.thumb
 1409              		.thumb_func
 1411              	__STREXH:
 1412              	.LFB20:
 739:../core_cm3.c **** 
 740:../core_cm3.c **** /**
 741:../core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 742:../core_cm3.c ****  *
 743:../core_cm3.c ****  * @param  value  value to store
 744:../core_cm3.c ****  * @param  *addr  address pointer
 745:../core_cm3.c ****  * @return        successful / failed
 746:../core_cm3.c ****  *
 747:../core_cm3.c ****  * Exclusive STR command for 16 bit values
 748:../core_cm3.c ****  */
 749:../core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 750:../core_cm3.c **** {
 1413              		.loc 1 750 0
 1414              		.cfi_startproc
 1415              		@ args = 0, pretend = 0, frame = 16
 1416              		@ frame_needed = 1, uses_anonymous_args = 0
 1417              		@ link register save eliminated.
 1418 0238 80B4     		push	{r7}
 1419              	.LCFI48:
 1420              		.cfi_def_cfa_offset 4
 1421 023a 85B0     		sub	sp, sp, #20
 1422              	.LCFI49:
 1423              		.cfi_def_cfa_offset 24
 1424 023c 00AF     		add	r7, sp, #0
 1425              		.cfi_offset 7, -4
 1426              	.LCFI50:
 1427              		.cfi_def_cfa_register 7
 1428 023e 0346     		mov	r3, r0
 1429 0240 3960     		str	r1, [r7, #0]
 1430 0242 FB80     		strh	r3, [r7, #6]	@ movhi
 751:../core_cm3.c ****    uint32_t result=0;
 1431              		.loc 1 751 0
 1432 0244 4FF00003 		mov	r3, #0
 1433 0248 FB60     		str	r3, [r7, #12]
 752:../core_cm3.c ****   
 753:../core_cm3.c ****    __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 1434              		.loc 1 753 0
 1435 024a 3B68     		ldr	r3, [r7, #0]
 1436 024c FA88     		ldrh	r2, [r7, #6]	@ movhi
 1437              	@ 753 "../core_cm3.c" 1
 1438 024e C3E8532F 		strexh r3, r2, [r3]
 1439              	@ 0 "" 2
 1440              		.thumb
 1441 0252 FB60     		str	r3, [r7, #12]
 754:../core_cm3.c ****    return(result);
 1442              		.loc 1 754 0
 1443 0254 FB68     		ldr	r3, [r7, #12]
 755:../core_cm3.c **** }
 1444              		.loc 1 755 0
 1445 0256 1846     		mov	r0, r3
 1446 0258 07F11407 		add	r7, r7, #20
 1447 025c BD46     		mov	sp, r7
 1448 025e 80BC     		pop	{r7}
 1449 0260 7047     		bx	lr
 1450              		.cfi_endproc
 1451              	.LFE20:
 1453 0262 00BF     		.align	2
 1454              		.global	__STREXW
 1455              		.thumb
 1456              		.thumb_func
 1458              	__STREXW:
 1459              	.LFB21:
 756:../core_cm3.c **** 
 757:../core_cm3.c **** /**
 758:../core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 759:../core_cm3.c ****  *
 760:../core_cm3.c ****  * @param  value  value to store
 761:../core_cm3.c ****  * @param  *addr  address pointer
 762:../core_cm3.c ****  * @return        successful / failed
 763:../core_cm3.c ****  *
 764:../core_cm3.c ****  * Exclusive STR command for 32 bit values
 765:../core_cm3.c ****  */
 766:../core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 767:../core_cm3.c **** {
 1460              		.loc 1 767 0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 16
 1463              		@ frame_needed = 1, uses_anonymous_args = 0
 1464              		@ link register save eliminated.
 1465 0264 80B4     		push	{r7}
 1466              	.LCFI51:
 1467              		.cfi_def_cfa_offset 4
 1468 0266 85B0     		sub	sp, sp, #20
 1469              	.LCFI52:
 1470              		.cfi_def_cfa_offset 24
 1471 0268 00AF     		add	r7, sp, #0
 1472              		.cfi_offset 7, -4
 1473              	.LCFI53:
 1474              		.cfi_def_cfa_register 7
 1475 026a 7860     		str	r0, [r7, #4]
 1476 026c 3960     		str	r1, [r7, #0]
 768:../core_cm3.c ****    uint32_t result=0;
 1477              		.loc 1 768 0
 1478 026e 4FF00003 		mov	r3, #0
 1479 0272 FB60     		str	r3, [r7, #12]
 769:../core_cm3.c ****   
 770:../core_cm3.c ****    __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 1480              		.loc 1 770 0
 1481 0274 3B68     		ldr	r3, [r7, #0]
 1482 0276 7A68     		ldr	r2, [r7, #4]
 1483              	@ 770 "../core_cm3.c" 1
 1484 0278 43E80023 		strex r3, r2, [r3]
 1485              	@ 0 "" 2
 1486              		.thumb
 1487 027c FB60     		str	r3, [r7, #12]
 771:../core_cm3.c ****    return(result);
 1488              		.loc 1 771 0
 1489 027e FB68     		ldr	r3, [r7, #12]
 772:../core_cm3.c **** }
 1490              		.loc 1 772 0
 1491 0280 1846     		mov	r0, r3
 1492 0282 07F11407 		add	r7, r7, #20
 1493 0286 BD46     		mov	sp, r7
 1494 0288 80BC     		pop	{r7}
 1495 028a 7047     		bx	lr
 1496              		.cfi_endproc
 1497              	.LFE21:
 1499              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 core_cm3.c
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:627    .text:00000000 $t
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:632    .text:00000000 __get_PSP
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:661    .text:00000010 __set_PSP
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:685    .text:00000018 __get_MSP
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:714    .text:00000028 __set_MSP
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:738    .text:00000030 __get_BASEPRI
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:780    .text:00000050 __set_BASEPRI
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:817    .text:00000068 __get_PRIMASK
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:859    .text:00000088 __set_PRIMASK
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:896    .text:000000a0 __get_FAULTMASK
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:938    .text:000000c0 __set_FAULTMASK
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:975    .text:000000d8 __get_CONTROL
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1017   .text:000000f8 __set_CONTROL
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1054   .text:00000110 __REV
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1098   .text:00000134 __REV16
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1143   .text:00000158 __REVSH
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1188   .text:0000017c __RBIT
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1232   .text:000001a0 __LDREXB
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1276   .text:000001c4 __LDREXH
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1320   .text:000001e8 __LDREXW
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1364   .text:0000020c __STREXB
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1411   .text:00000238 __STREXH
G:\DOCUME~1\marcelo\CONFIG~1\Temp\cc5ZPPxd.s:1458   .text:00000264 __STREXW
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
